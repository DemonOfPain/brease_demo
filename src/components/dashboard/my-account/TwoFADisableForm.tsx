'use client'
import Button from '@/components/generic/Button'
import { useUserStore } from '@/lib/hooks/useUserStore'
import { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/shadcn/ui/form'
import { InputOTP, InputOTPGroup, InputOTPSlot } from '@/components/shadcn/ui/input-otp'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'
import { Title } from '@/components/generic/Title'
import { Text } from '@/components/generic/Text'
import { twoFactorSchema } from './TwoFAEnableForm'
import { ButtonPlaceholder } from '@/components/generic/ButtonPlaceholder'
import { LoaderCircleIcon } from 'lucide-react'
import { useStore } from 'zustand'

export const TwoFADisableForm = () => {
  const form = useForm<z.infer<typeof twoFactorSchema>>({
    resolver: zodResolver(twoFactorSchema),
    defaultValues: {
      code: ''
    }
  })

  const userStore = useStore(useUserStore)
  const loading = useUserStore((state) => state.loading)

  const disable2FA = async (data: z.infer<typeof twoFactorSchema>) => {
    userStore.setLoading(true)
    userStore.disable2FA(Number(data.code))
    userStore.setLoading(false)
  }

  return (
    <div className="w-full flex flex-col items-center">
      <div className="flex flex-col items-center gap-5 pb-5">
        <div className="flex flex-col items-center gap-2">
          <Title size="sm" style="semibold">
            Disable 2FA
          </Title>
          <Text size="xs" style="regular" className="text-brease-gray-8 text-center">
            Enter the code generated by your Authenticator application
          </Text>
        </div>
      </div>
      <Form {...form}>
        <form
          onSubmit={form.handleSubmit(disable2FA)}
          className="w-full flex flex-col items-center justify-center space-y-6"
        >
          <FormField
            control={form.control}
            name="code"
            render={({ field }) => (
              <FormItem className="w-full flex flex-col items-center justify-center">
                <FormControl>
                  <InputOTP maxLength={6} {...field}>
                    <InputOTPGroup>
                      <InputOTPSlot index={0} />
                      <InputOTPSlot index={1} />
                      <InputOTPSlot index={2} />
                      <InputOTPSlot index={3} />
                      <InputOTPSlot index={4} />
                      <InputOTPSlot index={5} />
                    </InputOTPGroup>
                  </InputOTP>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {loading ? (
            <ButtonPlaceholder
              variant="primary"
              size="md"
              className="w-full justify-center !bg-brease-error"
            >
              <LoaderCircleIcon className="h-4 w-4 stroke-brease-gray-1 animate-spin" />
            </ButtonPlaceholder>
          ) : (
            <Button
              variant="primary"
              label="Continue"
              size="md"
              className="w-full justify-center !bg-brease-error !ring-brease-error hover:!bg-brease-error focus:!bg-brease-error"
              onClick={form.handleSubmit(disable2FA)}
            />
          )}
        </form>
      </Form>
    </div>
  )
}
